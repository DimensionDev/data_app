// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: nft_transfer/v1/nft_transfer.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetNftTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner          string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Chain          string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Type           string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	OrderBy        string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	OrderDirection string `protobuf:"bytes,5,opt,name=order_direction,json=orderDirection,proto3" json:"order_direction,omitempty"`
	Limit          int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Cursor         int32  `protobuf:"varint,7,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *GetNftTransferRequest) Reset() {
	*x = GetNftTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftTransferRequest) ProtoMessage() {}

func (x *GetNftTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftTransferRequest.ProtoReflect.Descriptor instead.
func (*GetNftTransferRequest) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *GetNftTransferRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetNftTransferRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *GetNftTransferRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetNftTransferRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetNftTransferRequest) GetOrderDirection() string {
	if x != nil {
		return x.OrderDirection
	}
	return ""
}

func (x *GetNftTransferRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNftTransferRequest) GetCursor() int32 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type GetNftTransferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason  string            `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*PnftTransferSt `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNftTransferReply) Reset() {
	*x = GetNftTransferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftTransferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftTransferReply) ProtoMessage() {}

func (x *GetNftTransferReply) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftTransferReply.ProtoReflect.Descriptor instead.
func (*GetNftTransferReply) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *GetNftTransferReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNftTransferReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetNftTransferReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNftTransferReply) GetData() []*PnftTransferSt {
	if x != nil {
		return x.Data
	}
	return nil
}

type PnftTransferSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftId                string `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Chain                string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	CollectionId         string `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	TransactionInitiator string `protobuf:"bytes,4,opt,name=transaction_initiator,json=transactionInitiator,proto3" json:"transaction_initiator,omitempty"`
	BlockNumber          uint64 `protobuf:"varint,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash            string `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TransactionHash      string `protobuf:"bytes,7,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	BlockTimestamp       string `protobuf:"bytes,8,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	EventType            string `protobuf:"bytes,9,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	BatchTransferIndex   uint32 `protobuf:"varint,10,opt,name=batch_transfer_index,json=batchTransferIndex,proto3" json:"batch_transfer_index,omitempty"`
	ContractAddress      string `protobuf:"bytes,11,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenId              string `protobuf:"bytes,12,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	AddressFrom          string `protobuf:"bytes,13,opt,name=address_from,json=addressFrom,proto3" json:"address_from,omitempty"`
	AddressTo            string `protobuf:"bytes,14,opt,name=address_to,json=addressTo,proto3" json:"address_to,omitempty"`
	Quantity             uint64 `protobuf:"varint,15,opt,name=quantity,proto3" json:"quantity,omitempty"`
	SaleDetails          string `protobuf:"bytes,16,opt,name=sale_details,json=saleDetails,proto3" json:"sale_details,omitempty"`
}

func (x *PnftTransferSt) Reset() {
	*x = PnftTransferSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PnftTransferSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PnftTransferSt) ProtoMessage() {}

func (x *PnftTransferSt) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PnftTransferSt.ProtoReflect.Descriptor instead.
func (*PnftTransferSt) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *PnftTransferSt) GetNftId() string {
	if x != nil {
		return x.NftId
	}
	return ""
}

func (x *PnftTransferSt) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *PnftTransferSt) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *PnftTransferSt) GetTransactionInitiator() string {
	if x != nil {
		return x.TransactionInitiator
	}
	return ""
}

func (x *PnftTransferSt) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *PnftTransferSt) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *PnftTransferSt) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *PnftTransferSt) GetBlockTimestamp() string {
	if x != nil {
		return x.BlockTimestamp
	}
	return ""
}

func (x *PnftTransferSt) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *PnftTransferSt) GetBatchTransferIndex() uint32 {
	if x != nil {
		return x.BatchTransferIndex
	}
	return 0
}

func (x *PnftTransferSt) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *PnftTransferSt) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *PnftTransferSt) GetAddressFrom() string {
	if x != nil {
		return x.AddressFrom
	}
	return ""
}

func (x *PnftTransferSt) GetAddressTo() string {
	if x != nil {
		return x.AddressTo
	}
	return ""
}

func (x *PnftTransferSt) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PnftTransferSt) GetSaleDetails() string {
	if x != nil {
		return x.SaleDetails
	}
	return ""
}

var File_nft_transfer_v1_nft_transfer_proto protoreflect.FileDescriptor

var file_nft_transfer_v1_nft_transfer_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x94, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x04, 0x0a,
	0x0e, 0x50, 0x6e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6e, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x66, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x32, 0x9e, 0x01, 0x0a, 0x0b, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x8e, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x66, 0x74, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x3c, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x23,
	0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nft_transfer_v1_nft_transfer_proto_rawDescOnce sync.Once
	file_nft_transfer_v1_nft_transfer_proto_rawDescData = file_nft_transfer_v1_nft_transfer_proto_rawDesc
)

func file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP() []byte {
	file_nft_transfer_v1_nft_transfer_proto_rawDescOnce.Do(func() {
		file_nft_transfer_v1_nft_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_transfer_v1_nft_transfer_proto_rawDescData)
	})
	return file_nft_transfer_v1_nft_transfer_proto_rawDescData
}

var file_nft_transfer_v1_nft_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_nft_transfer_v1_nft_transfer_proto_goTypes = []interface{}{
	(*GetNftTransferRequest)(nil), // 0: api.nft_transfer.v1.GetNftTransferRequest
	(*GetNftTransferReply)(nil),   // 1: api.nft_transfer.v1.GetNftTransferReply
	(*PnftTransferSt)(nil),        // 2: api.nft_transfer.v1.PnftTransferSt
}
var file_nft_transfer_v1_nft_transfer_proto_depIdxs = []int32{
	2, // 0: api.nft_transfer.v1.GetNftTransferReply.data:type_name -> api.nft_transfer.v1.PnftTransferSt
	0, // 1: api.nft_transfer.v1.NftTransfer.GetNftTransfer:input_type -> api.nft_transfer.v1.GetNftTransferRequest
	1, // 2: api.nft_transfer.v1.NftTransfer.GetNftTransfer:output_type -> api.nft_transfer.v1.GetNftTransferReply
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_nft_transfer_v1_nft_transfer_proto_init() }
func file_nft_transfer_v1_nft_transfer_proto_init() {
	if File_nft_transfer_v1_nft_transfer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftTransferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PnftTransferSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_transfer_v1_nft_transfer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nft_transfer_v1_nft_transfer_proto_goTypes,
		DependencyIndexes: file_nft_transfer_v1_nft_transfer_proto_depIdxs,
		MessageInfos:      file_nft_transfer_v1_nft_transfer_proto_msgTypes,
	}.Build()
	File_nft_transfer_v1_nft_transfer_proto = out.File
	file_nft_transfer_v1_nft_transfer_proto_rawDesc = nil
	file_nft_transfer_v1_nft_transfer_proto_goTypes = nil
	file_nft_transfer_v1_nft_transfer_proto_depIdxs = nil
}

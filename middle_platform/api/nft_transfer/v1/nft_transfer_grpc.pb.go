// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: nft_transfer/v1/nft_transfer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NftTransfer_GetNftTransfer_FullMethodName = "/api.nft_transfer.v1.NftTransfer/GetNftTransfer"
	NftTransfer_GetReportSpam_FullMethodName  = "/api.nft_transfer.v1.NftTransfer/GetReportSpam"
	NftTransfer_PostReportSpam_FullMethodName = "/api.nft_transfer.v1.NftTransfer/PostReportSpam"
	NftTransfer_GetTransferNft_FullMethodName = "/api.nft_transfer.v1.NftTransfer/GetTransferNft"
)

// NftTransferClient is the client API for NftTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NftTransferClient interface {
	GetNftTransfer(ctx context.Context, in *GetNftTransferRequest, opts ...grpc.CallOption) (*GetNftTransferReply, error)
	GetReportSpam(ctx context.Context, in *GetReportSpamRequest, opts ...grpc.CallOption) (*GetReportSpamReply, error)
	PostReportSpam(ctx context.Context, in *PostReportSpamRequest, opts ...grpc.CallOption) (*PostReportSpamReply, error)
	GetTransferNft(ctx context.Context, in *GetTransferNftRequest, opts ...grpc.CallOption) (*GetTransferNftReply, error)
}

type nftTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewNftTransferClient(cc grpc.ClientConnInterface) NftTransferClient {
	return &nftTransferClient{cc}
}

func (c *nftTransferClient) GetNftTransfer(ctx context.Context, in *GetNftTransferRequest, opts ...grpc.CallOption) (*GetNftTransferReply, error) {
	out := new(GetNftTransferReply)
	err := c.cc.Invoke(ctx, NftTransfer_GetNftTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftTransferClient) GetReportSpam(ctx context.Context, in *GetReportSpamRequest, opts ...grpc.CallOption) (*GetReportSpamReply, error) {
	out := new(GetReportSpamReply)
	err := c.cc.Invoke(ctx, NftTransfer_GetReportSpam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftTransferClient) PostReportSpam(ctx context.Context, in *PostReportSpamRequest, opts ...grpc.CallOption) (*PostReportSpamReply, error) {
	out := new(PostReportSpamReply)
	err := c.cc.Invoke(ctx, NftTransfer_PostReportSpam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftTransferClient) GetTransferNft(ctx context.Context, in *GetTransferNftRequest, opts ...grpc.CallOption) (*GetTransferNftReply, error) {
	out := new(GetTransferNftReply)
	err := c.cc.Invoke(ctx, NftTransfer_GetTransferNft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NftTransferServer is the server API for NftTransfer service.
// All implementations must embed UnimplementedNftTransferServer
// for forward compatibility
type NftTransferServer interface {
	GetNftTransfer(context.Context, *GetNftTransferRequest) (*GetNftTransferReply, error)
	GetReportSpam(context.Context, *GetReportSpamRequest) (*GetReportSpamReply, error)
	PostReportSpam(context.Context, *PostReportSpamRequest) (*PostReportSpamReply, error)
	GetTransferNft(context.Context, *GetTransferNftRequest) (*GetTransferNftReply, error)
	mustEmbedUnimplementedNftTransferServer()
}

// UnimplementedNftTransferServer must be embedded to have forward compatible implementations.
type UnimplementedNftTransferServer struct {
}

func (UnimplementedNftTransferServer) GetNftTransfer(context.Context, *GetNftTransferRequest) (*GetNftTransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftTransfer not implemented")
}
func (UnimplementedNftTransferServer) GetReportSpam(context.Context, *GetReportSpamRequest) (*GetReportSpamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportSpam not implemented")
}
func (UnimplementedNftTransferServer) PostReportSpam(context.Context, *PostReportSpamRequest) (*PostReportSpamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReportSpam not implemented")
}
func (UnimplementedNftTransferServer) GetTransferNft(context.Context, *GetTransferNftRequest) (*GetTransferNftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferNft not implemented")
}
func (UnimplementedNftTransferServer) mustEmbedUnimplementedNftTransferServer() {}

// UnsafeNftTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NftTransferServer will
// result in compilation errors.
type UnsafeNftTransferServer interface {
	mustEmbedUnimplementedNftTransferServer()
}

func RegisterNftTransferServer(s grpc.ServiceRegistrar, srv NftTransferServer) {
	s.RegisterService(&NftTransfer_ServiceDesc, srv)
}

func _NftTransfer_GetNftTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNftTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftTransferServer).GetNftTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NftTransfer_GetNftTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftTransferServer).GetNftTransfer(ctx, req.(*GetNftTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NftTransfer_GetReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportSpamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftTransferServer).GetReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NftTransfer_GetReportSpam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftTransferServer).GetReportSpam(ctx, req.(*GetReportSpamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NftTransfer_PostReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReportSpamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftTransferServer).PostReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NftTransfer_PostReportSpam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftTransferServer).PostReportSpam(ctx, req.(*PostReportSpamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NftTransfer_GetTransferNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftTransferServer).GetTransferNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NftTransfer_GetTransferNft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftTransferServer).GetTransferNft(ctx, req.(*GetTransferNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NftTransfer_ServiceDesc is the grpc.ServiceDesc for NftTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NftTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.nft_transfer.v1.NftTransfer",
	HandlerType: (*NftTransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNftTransfer",
			Handler:    _NftTransfer_GetNftTransfer_Handler,
		},
		{
			MethodName: "GetReportSpam",
			Handler:    _NftTransfer_GetReportSpam_Handler,
		},
		{
			MethodName: "PostReportSpam",
			Handler:    _NftTransfer_PostReportSpam_Handler,
		},
		{
			MethodName: "GetTransferNft",
			Handler:    _NftTransfer_GetTransferNft_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nft_transfer/v1/nft_transfer.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: nft_transfer/v1/nft_transfer.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PostReportAccountMuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *PostReportAccountMuteRequest) Reset() {
	*x = PostReportAccountMuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostReportAccountMuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostReportAccountMuteRequest) ProtoMessage() {}

func (x *PostReportAccountMuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostReportAccountMuteRequest.ProtoReflect.Descriptor instead.
func (*PostReportAccountMuteRequest) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *PostReportAccountMuteRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PostReportAccountMuteRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type AccountMuteReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CollectionId string  `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CreatedAt    *string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
}

func (x *AccountMuteReport) Reset() {
	*x = AccountMuteReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountMuteReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountMuteReport) ProtoMessage() {}

func (x *AccountMuteReport) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountMuteReport.ProtoReflect.Descriptor instead.
func (*AccountMuteReport) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *AccountMuteReport) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountMuteReport) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *AccountMuteReport) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

type PostReportAccountMuteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *AccountMuteReport `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PostReportAccountMuteReply) Reset() {
	*x = PostReportAccountMuteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostReportAccountMuteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostReportAccountMuteReply) ProtoMessage() {}

func (x *PostReportAccountMuteReply) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostReportAccountMuteReply.ProtoReflect.Descriptor instead.
func (*PostReportAccountMuteReply) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *PostReportAccountMuteReply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PostReportAccountMuteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PostReportAccountMuteReply) GetData() *AccountMuteReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTransferNftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	EventType       string `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Owners          string `protobuf:"bytes,3,opt,name=owners,proto3" json:"owners,omitempty"`
	Page            uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Limit           uint32 `protobuf:"varint,5,opt,name=limit,json=page_size,proto3" json:"limit,omitempty"`
}

func (x *GetTransferNftRequest) Reset() {
	*x = GetTransferNftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferNftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferNftRequest) ProtoMessage() {}

func (x *GetTransferNftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferNftRequest.ProtoReflect.Descriptor instead.
func (*GetTransferNftRequest) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *GetTransferNftRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *GetTransferNftRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *GetTransferNftRequest) GetOwners() string {
	if x != nil {
		return x.Owners
	}
	return ""
}

func (x *GetTransferNftRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTransferNftRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTransferNftReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  uint32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Page  uint32         `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32         `protobuf:"varint,3,opt,name=limit,json=page_size,proto3" json:"limit,omitempty"`
	Total uint64         `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*TransferNft `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTransferNftReply) Reset() {
	*x = GetTransferNftReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferNftReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferNftReply) ProtoMessage() {}

func (x *GetTransferNftReply) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferNftReply.ProtoReflect.Descriptor instead.
func (*GetTransferNftReply) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *GetTransferNftReply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTransferNftReply) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTransferNftReply) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTransferNftReply) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetTransferNftReply) GetData() []*TransferNft {
	if x != nil {
		return x.Data
	}
	return nil
}

type TransferNft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	NftId           string `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Chain           string `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	TokenId         string `protobuf:"bytes,4,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	CollectionId    string `protobuf:"bytes,5,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	EventType       string `protobuf:"bytes,6,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	AddressFrom     string `protobuf:"bytes,7,opt,name=address_from,json=addressFrom,proto3" json:"address_from,omitempty"`
	AddressTo       string `protobuf:"bytes,8,opt,name=address_to,json=addressTo,proto3" json:"address_to,omitempty"`
	Owner           string `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	BlockTimestamp  string `protobuf:"bytes,10,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
}

func (x *TransferNft) Reset() {
	*x = TransferNft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferNft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferNft) ProtoMessage() {}

func (x *TransferNft) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferNft.ProtoReflect.Descriptor instead.
func (*TransferNft) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *TransferNft) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *TransferNft) GetNftId() string {
	if x != nil {
		return x.NftId
	}
	return ""
}

func (x *TransferNft) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *TransferNft) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *TransferNft) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *TransferNft) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *TransferNft) GetAddressFrom() string {
	if x != nil {
		return x.AddressFrom
	}
	return ""
}

func (x *TransferNft) GetAddressTo() string {
	if x != nil {
		return x.AddressTo
	}
	return ""
}

func (x *TransferNft) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TransferNft) GetBlockTimestamp() string {
	if x != nil {
		return x.BlockTimestamp
	}
	return ""
}

type PostReportSpamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string  `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Status       string  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	CreateAt     *string `protobuf:"bytes,3,opt,name=create_at,json=createAt,proto3,oneof" json:"create_at,omitempty"`
	UpdateAt     *string `protobuf:"bytes,4,opt,name=update_at,json=updateAt,proto3,oneof" json:"update_at,omitempty"`
	Source       *string `protobuf:"bytes,5,opt,name=source,proto3,oneof" json:"source,omitempty"`
	CreateBy     *string `protobuf:"bytes,6,opt,name=create_by,json=createBy,proto3,oneof" json:"create_by,omitempty"` // Format: "platform:{id/handle}" (e.g. "twitter:handle", "farcaster:handle", "lens:handle")
	UpdateBy     *string `protobuf:"bytes,7,opt,name=update_by,json=updateBy,proto3,oneof" json:"update_by,omitempty"` // Format: same as create_by
}

func (x *PostReportSpamRequest) Reset() {
	*x = PostReportSpamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostReportSpamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostReportSpamRequest) ProtoMessage() {}

func (x *PostReportSpamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostReportSpamRequest.ProtoReflect.Descriptor instead.
func (*PostReportSpamRequest) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{6}
}

func (x *PostReportSpamRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *PostReportSpamRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PostReportSpamRequest) GetCreateAt() string {
	if x != nil && x.CreateAt != nil {
		return *x.CreateAt
	}
	return ""
}

func (x *PostReportSpamRequest) GetUpdateAt() string {
	if x != nil && x.UpdateAt != nil {
		return *x.UpdateAt
	}
	return ""
}

func (x *PostReportSpamRequest) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *PostReportSpamRequest) GetCreateBy() string {
	if x != nil && x.CreateBy != nil {
		return *x.CreateBy
	}
	return ""
}

func (x *PostReportSpamRequest) GetUpdateBy() string {
	if x != nil && x.UpdateBy != nil {
		return *x.UpdateBy
	}
	return ""
}

type PostReportSpamReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SpamReport `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PostReportSpamReply) Reset() {
	*x = PostReportSpamReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostReportSpamReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostReportSpamReply) ProtoMessage() {}

func (x *PostReportSpamReply) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostReportSpamReply.ProtoReflect.Descriptor instead.
func (*PostReportSpamReply) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{7}
}

func (x *PostReportSpamReply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PostReportSpamReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PostReportSpamReply) GetData() *SpamReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type SpamReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string  `protobuf:"bytes,1,opt,name=collection_id,proto3" json:"collection_id,omitempty"`
	Status       string  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	CreateAt     *string `protobuf:"bytes,3,opt,name=create_at,proto3,oneof" json:"create_at,omitempty"`
	UpdateAt     *string `protobuf:"bytes,4,opt,name=update_at,proto3,oneof" json:"update_at,omitempty"`
	Source       *string `protobuf:"bytes,5,opt,name=source,proto3,oneof" json:"source,omitempty"`
	CreateBy     *string `protobuf:"bytes,6,opt,name=create_by,proto3,oneof" json:"create_by,omitempty"` // Format: "platform:{id/handle}" (e.g. "twitter:handle", "farcaster:handle", "lens:handle")
	UpdateBy     *string `protobuf:"bytes,7,opt,name=update_by,proto3,oneof" json:"update_by,omitempty"` // Format: same as create_by
}

func (x *SpamReport) Reset() {
	*x = SpamReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpamReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpamReport) ProtoMessage() {}

func (x *SpamReport) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpamReport.ProtoReflect.Descriptor instead.
func (*SpamReport) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{8}
}

func (x *SpamReport) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *SpamReport) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SpamReport) GetCreateAt() string {
	if x != nil && x.CreateAt != nil {
		return *x.CreateAt
	}
	return ""
}

func (x *SpamReport) GetUpdateAt() string {
	if x != nil && x.UpdateAt != nil {
		return *x.UpdateAt
	}
	return ""
}

func (x *SpamReport) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *SpamReport) GetCreateBy() string {
	if x != nil && x.CreateBy != nil {
		return *x.CreateBy
	}
	return ""
}

func (x *SpamReport) GetUpdateBy() string {
	if x != nil && x.UpdateBy != nil {
		return *x.UpdateBy
	}
	return ""
}

type GetReportSpamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Status       string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// uint32 cursor = 3;
	Page   uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit  uint32 `protobuf:"varint,4,opt,name=limit,json=page_size,proto3" json:"limit,omitempty"`
	Source string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *GetReportSpamRequest) Reset() {
	*x = GetReportSpamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportSpamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportSpamRequest) ProtoMessage() {}

func (x *GetReportSpamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportSpamRequest.ProtoReflect.Descriptor instead.
func (*GetReportSpamRequest) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{9}
}

func (x *GetReportSpamRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetReportSpamRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetReportSpamRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetReportSpamRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetReportSpamRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type GetReportSpamReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// optional uint32 cursor = 2;
	Page  uint32        `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32        `protobuf:"varint,3,opt,name=limit,json=page_size,proto3" json:"limit,omitempty"`
	Total uint64        `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*SpamReport `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetReportSpamReply) Reset() {
	*x = GetReportSpamReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportSpamReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportSpamReply) ProtoMessage() {}

func (x *GetReportSpamReply) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportSpamReply.ProtoReflect.Descriptor instead.
func (*GetReportSpamReply) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{10}
}

func (x *GetReportSpamReply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetReportSpamReply) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetReportSpamReply) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetReportSpamReply) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetReportSpamReply) GetData() []*SpamReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetNftTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Network        string  `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Type           string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	OrderBy        string  `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	OrderDirection string  `protobuf:"bytes,5,opt,name=order_direction,json=orderDirection,proto3" json:"order_direction,omitempty"`
	Limit          uint64  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Cursor         uint64  `protobuf:"varint,7,opt,name=cursor,proto3" json:"cursor,omitempty"`
	AccountId      *string `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
}

func (x *GetNftTransferRequest) Reset() {
	*x = GetNftTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftTransferRequest) ProtoMessage() {}

func (x *GetNftTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftTransferRequest.ProtoReflect.Descriptor instead.
func (*GetNftTransferRequest) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{11}
}

func (x *GetNftTransferRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetNftTransferRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GetNftTransferRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetNftTransferRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetNftTransferRequest) GetOrderDirection() string {
	if x != nil {
		return x.OrderDirection
	}
	return ""
}

func (x *GetNftTransferRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNftTransferRequest) GetCursor() uint64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *GetNftTransferRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

type GetNftTransferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason  string          `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *PnftTransferSt `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNftTransferReply) Reset() {
	*x = GetNftTransferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftTransferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftTransferReply) ProtoMessage() {}

func (x *GetNftTransferReply) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftTransferReply.ProtoReflect.Descriptor instead.
func (*GetNftTransferReply) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{12}
}

func (x *GetNftTransferReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNftTransferReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetNftTransferReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNftTransferReply) GetData() *PnftTransferSt {
	if x != nil {
		return x.Data
	}
	return nil
}

type PnftTransferSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor *string      `protobuf:"bytes,1,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`
	Result []*NodeStArr `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *PnftTransferSt) Reset() {
	*x = PnftTransferSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PnftTransferSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PnftTransferSt) ProtoMessage() {}

func (x *PnftTransferSt) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PnftTransferSt.ProtoReflect.Descriptor instead.
func (*PnftTransferSt) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{13}
}

func (x *PnftTransferSt) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

func (x *PnftTransferSt) GetResult() []*NodeStArr {
	if x != nil {
		return x.Result
	}
	return nil
}

type NodeStArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   string         `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Hash        string         `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Owner       string         `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	AddressFrom string         `protobuf:"bytes,4,opt,name=address_from,proto3" json:"address_from,omitempty"`
	AddressTo   string         `protobuf:"bytes,5,opt,name=address_to,proto3" json:"address_to,omitempty"`
	Network     string         `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	Tag         string         `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`
	Type        string         `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Actions     []*ActionStArr `protobuf:"bytes,9,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *NodeStArr) Reset() {
	*x = NodeStArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStArr) ProtoMessage() {}

func (x *NodeStArr) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStArr.ProtoReflect.Descriptor instead.
func (*NodeStArr) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{14}
}

func (x *NodeStArr) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *NodeStArr) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *NodeStArr) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *NodeStArr) GetAddressFrom() string {
	if x != nil {
		return x.AddressFrom
	}
	return ""
}

func (x *NodeStArr) GetAddressTo() string {
	if x != nil {
		return x.AddressTo
	}
	return ""
}

func (x *NodeStArr) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NodeStArr) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *NodeStArr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NodeStArr) GetActions() []*ActionStArr {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ActionStArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag             string  `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Type            string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Index           uint32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	AddressFrom     string  `protobuf:"bytes,4,opt,name=address_from,proto3" json:"address_from,omitempty"`
	AddressTo       string  `protobuf:"bytes,5,opt,name=address_to,proto3" json:"address_to,omitempty"`
	Cost            *CostSt `protobuf:"bytes,6,opt,name=cost,proto3" json:"cost,omitempty"`
	ContractAddress string  `protobuf:"bytes,7,opt,name=contract_address,proto3" json:"contract_address,omitempty"`
	TokenId         string  `protobuf:"bytes,8,opt,name=token_id,proto3" json:"token_id,omitempty"`
}

func (x *ActionStArr) Reset() {
	*x = ActionStArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionStArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionStArr) ProtoMessage() {}

func (x *ActionStArr) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionStArr.ProtoReflect.Descriptor instead.
func (*ActionStArr) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{15}
}

func (x *ActionStArr) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ActionStArr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActionStArr) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ActionStArr) GetAddressFrom() string {
	if x != nil {
		return x.AddressFrom
	}
	return ""
}

func (x *ActionStArr) GetAddressTo() string {
	if x != nil {
		return x.AddressTo
	}
	return ""
}

func (x *ActionStArr) GetCost() *CostSt {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *ActionStArr) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ActionStArr) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type CostSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Decimals uint32 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (x *CostSt) Reset() {
	*x = CostSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostSt) ProtoMessage() {}

func (x *CostSt) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostSt.ProtoReflect.Descriptor instead.
func (*CostSt) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{16}
}

func (x *CostSt) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CostSt) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CostSt) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

type WhitelistCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string  `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CreatedAt    string  `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string  `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Description  *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *WhitelistCollection) Reset() {
	*x = WhitelistCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhitelistCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhitelistCollection) ProtoMessage() {}

func (x *WhitelistCollection) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhitelistCollection.ProtoReflect.Descriptor instead.
func (*WhitelistCollection) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{17}
}

func (x *WhitelistCollection) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *WhitelistCollection) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WhitelistCollection) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *WhitelistCollection) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type AddWhitelistCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string  `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Description  *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *AddWhitelistCollectionRequest) Reset() {
	*x = AddWhitelistCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWhitelistCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWhitelistCollectionRequest) ProtoMessage() {}

func (x *AddWhitelistCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWhitelistCollectionRequest.ProtoReflect.Descriptor instead.
func (*AddWhitelistCollectionRequest) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{18}
}

func (x *AddWhitelistCollectionRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *AddWhitelistCollectionRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type AddWhitelistCollectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *WhitelistCollection `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddWhitelistCollectionReply) Reset() {
	*x = AddWhitelistCollectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWhitelistCollectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWhitelistCollectionReply) ProtoMessage() {}

func (x *AddWhitelistCollectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWhitelistCollectionReply.ProtoReflect.Descriptor instead.
func (*AddWhitelistCollectionReply) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{19}
}

func (x *AddWhitelistCollectionReply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddWhitelistCollectionReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddWhitelistCollectionReply) GetData() *WhitelistCollection {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteWhitelistCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *DeleteWhitelistCollectionRequest) Reset() {
	*x = DeleteWhitelistCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWhitelistCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWhitelistCollectionRequest) ProtoMessage() {}

func (x *DeleteWhitelistCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWhitelistCollectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteWhitelistCollectionRequest) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteWhitelistCollectionRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type DeleteWhitelistCollectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteWhitelistCollectionReply) Reset() {
	*x = DeleteWhitelistCollectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWhitelistCollectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWhitelistCollectionReply) ProtoMessage() {}

func (x *DeleteWhitelistCollectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWhitelistCollectionReply.ProtoReflect.Descriptor instead.
func (*DeleteWhitelistCollectionReply) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteWhitelistCollectionReply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteWhitelistCollectionReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListWhitelistCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,json=page_size,proto3" json:"limit,omitempty"`
}

func (x *ListWhitelistCollectionsRequest) Reset() {
	*x = ListWhitelistCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWhitelistCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWhitelistCollectionsRequest) ProtoMessage() {}

func (x *ListWhitelistCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWhitelistCollectionsRequest.ProtoReflect.Descriptor instead.
func (*ListWhitelistCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{22}
}

func (x *ListWhitelistCollectionsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListWhitelistCollectionsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListWhitelistCollectionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Page  uint32                 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32                 `protobuf:"varint,3,opt,name=limit,json=page_size,proto3" json:"limit,omitempty"`
	Total uint64                 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*WhitelistCollection `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListWhitelistCollectionsReply) Reset() {
	*x = ListWhitelistCollectionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWhitelistCollectionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWhitelistCollectionsReply) ProtoMessage() {}

func (x *ListWhitelistCollectionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWhitelistCollectionsReply.ProtoReflect.Descriptor instead.
func (*ListWhitelistCollectionsReply) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{23}
}

func (x *ListWhitelistCollectionsReply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListWhitelistCollectionsReply) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListWhitelistCollectionsReply) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListWhitelistCollectionsReply) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListWhitelistCollectionsReply) GetData() []*WhitelistCollection {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSupportedChainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSupportedChainsRequest) Reset() {
	*x = GetSupportedChainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportedChainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedChainsRequest) ProtoMessage() {}

func (x *GetSupportedChainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedChainsRequest.ProtoReflect.Descriptor instead.
func (*GetSupportedChainsRequest) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{24}
}

type ChainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Chain name (e.g., "Ethereum")
}

func (x *ChainInfo) Reset() {
	*x = ChainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainInfo) ProtoMessage() {}

func (x *ChainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainInfo.ProtoReflect.Descriptor instead.
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{25}
}

func (x *ChainInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSupportedChainsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*ChainInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSupportedChainsReply) Reset() {
	*x = GetSupportedChainsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportedChainsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedChainsReply) ProtoMessage() {}

func (x *GetSupportedChainsReply) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedChainsReply.ProtoReflect.Descriptor instead.
func (*GetSupportedChainsReply) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{26}
}

func (x *GetSupportedChainsReply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSupportedChainsReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSupportedChainsReply) GetData() []*ChainInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_nft_transfer_v1_nft_transfer_proto protoreflect.FileDescriptor

var file_nft_transfer_v1_nft_transfer_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x62, 0x0a, 0x1c, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4e, 0x66, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x02, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x66, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xbc, 0x02, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x22, 0x78, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x70, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb6, 0x02, 0x0a, 0x0a,
	0x53, 0x70, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0xa1, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x0e, 0x50,
	0x6e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x12, 0x1b, 0x0a,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x41, 0x72, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x93, 0x02,
	0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x41, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x41, 0x72, 0x72, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x41, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x52, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x06,
	0x43, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73,
	0x22, 0xaf, 0x01, 0x0a, 0x13, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x41, 0x64,
	0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7b,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xbf, 0x0b, 0x0a, 0x0b,
	0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0xb3, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x5a, 0x23, 0x3a, 0x01,
	0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x66, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x66, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x70, 0x61, 0x6d, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x73, 0x70, 0x61, 0x6d, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x66, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x70, 0x61, 0x6d, 0x12,
	0x84, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e,
	0x66, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4e, 0x66, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x73, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x95, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x74, 0x65,
	0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22,
	0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x75, 0x74, 0x65, 0x12, 0xaf,
	0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x66, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xc5, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x2a, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb3, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9c,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x66, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x3f, 0x0a,
	0x13, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x26, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nft_transfer_v1_nft_transfer_proto_rawDescOnce sync.Once
	file_nft_transfer_v1_nft_transfer_proto_rawDescData = file_nft_transfer_v1_nft_transfer_proto_rawDesc
)

func file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP() []byte {
	file_nft_transfer_v1_nft_transfer_proto_rawDescOnce.Do(func() {
		file_nft_transfer_v1_nft_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_transfer_v1_nft_transfer_proto_rawDescData)
	})
	return file_nft_transfer_v1_nft_transfer_proto_rawDescData
}

var file_nft_transfer_v1_nft_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_nft_transfer_v1_nft_transfer_proto_goTypes = []interface{}{
	(*PostReportAccountMuteRequest)(nil),     // 0: api.nft_transfer.v1.PostReportAccountMuteRequest
	(*AccountMuteReport)(nil),                // 1: api.nft_transfer.v1.AccountMuteReport
	(*PostReportAccountMuteReply)(nil),       // 2: api.nft_transfer.v1.PostReportAccountMuteReply
	(*GetTransferNftRequest)(nil),            // 3: api.nft_transfer.v1.GetTransferNftRequest
	(*GetTransferNftReply)(nil),              // 4: api.nft_transfer.v1.GetTransferNftReply
	(*TransferNft)(nil),                      // 5: api.nft_transfer.v1.TransferNft
	(*PostReportSpamRequest)(nil),            // 6: api.nft_transfer.v1.PostReportSpamRequest
	(*PostReportSpamReply)(nil),              // 7: api.nft_transfer.v1.PostReportSpamReply
	(*SpamReport)(nil),                       // 8: api.nft_transfer.v1.SpamReport
	(*GetReportSpamRequest)(nil),             // 9: api.nft_transfer.v1.GetReportSpamRequest
	(*GetReportSpamReply)(nil),               // 10: api.nft_transfer.v1.GetReportSpamReply
	(*GetNftTransferRequest)(nil),            // 11: api.nft_transfer.v1.GetNftTransferRequest
	(*GetNftTransferReply)(nil),              // 12: api.nft_transfer.v1.GetNftTransferReply
	(*PnftTransferSt)(nil),                   // 13: api.nft_transfer.v1.PnftTransferSt
	(*NodeStArr)(nil),                        // 14: api.nft_transfer.v1.NodeStArr
	(*ActionStArr)(nil),                      // 15: api.nft_transfer.v1.ActionStArr
	(*CostSt)(nil),                           // 16: api.nft_transfer.v1.CostSt
	(*WhitelistCollection)(nil),              // 17: api.nft_transfer.v1.WhitelistCollection
	(*AddWhitelistCollectionRequest)(nil),    // 18: api.nft_transfer.v1.AddWhitelistCollectionRequest
	(*AddWhitelistCollectionReply)(nil),      // 19: api.nft_transfer.v1.AddWhitelistCollectionReply
	(*DeleteWhitelistCollectionRequest)(nil), // 20: api.nft_transfer.v1.DeleteWhitelistCollectionRequest
	(*DeleteWhitelistCollectionReply)(nil),   // 21: api.nft_transfer.v1.DeleteWhitelistCollectionReply
	(*ListWhitelistCollectionsRequest)(nil),  // 22: api.nft_transfer.v1.ListWhitelistCollectionsRequest
	(*ListWhitelistCollectionsReply)(nil),    // 23: api.nft_transfer.v1.ListWhitelistCollectionsReply
	(*GetSupportedChainsRequest)(nil),        // 24: api.nft_transfer.v1.GetSupportedChainsRequest
	(*ChainInfo)(nil),                        // 25: api.nft_transfer.v1.ChainInfo
	(*GetSupportedChainsReply)(nil),          // 26: api.nft_transfer.v1.GetSupportedChainsReply
}
var file_nft_transfer_v1_nft_transfer_proto_depIdxs = []int32{
	1,  // 0: api.nft_transfer.v1.PostReportAccountMuteReply.data:type_name -> api.nft_transfer.v1.AccountMuteReport
	5,  // 1: api.nft_transfer.v1.GetTransferNftReply.data:type_name -> api.nft_transfer.v1.TransferNft
	8,  // 2: api.nft_transfer.v1.PostReportSpamReply.data:type_name -> api.nft_transfer.v1.SpamReport
	8,  // 3: api.nft_transfer.v1.GetReportSpamReply.data:type_name -> api.nft_transfer.v1.SpamReport
	13, // 4: api.nft_transfer.v1.GetNftTransferReply.data:type_name -> api.nft_transfer.v1.PnftTransferSt
	14, // 5: api.nft_transfer.v1.PnftTransferSt.result:type_name -> api.nft_transfer.v1.NodeStArr
	15, // 6: api.nft_transfer.v1.NodeStArr.actions:type_name -> api.nft_transfer.v1.ActionStArr
	16, // 7: api.nft_transfer.v1.ActionStArr.cost:type_name -> api.nft_transfer.v1.CostSt
	17, // 8: api.nft_transfer.v1.AddWhitelistCollectionReply.data:type_name -> api.nft_transfer.v1.WhitelistCollection
	17, // 9: api.nft_transfer.v1.ListWhitelistCollectionsReply.data:type_name -> api.nft_transfer.v1.WhitelistCollection
	25, // 10: api.nft_transfer.v1.GetSupportedChainsReply.data:type_name -> api.nft_transfer.v1.ChainInfo
	11, // 11: api.nft_transfer.v1.NftTransfer.GetNftTransfer:input_type -> api.nft_transfer.v1.GetNftTransferRequest
	9,  // 12: api.nft_transfer.v1.NftTransfer.GetReportSpam:input_type -> api.nft_transfer.v1.GetReportSpamRequest
	6,  // 13: api.nft_transfer.v1.NftTransfer.PostReportSpam:input_type -> api.nft_transfer.v1.PostReportSpamRequest
	3,  // 14: api.nft_transfer.v1.NftTransfer.GetTransferNft:input_type -> api.nft_transfer.v1.GetTransferNftRequest
	0,  // 15: api.nft_transfer.v1.NftTransfer.PostReportAccountMute:input_type -> api.nft_transfer.v1.PostReportAccountMuteRequest
	18, // 16: api.nft_transfer.v1.NftTransfer.AddWhitelistCollection:input_type -> api.nft_transfer.v1.AddWhitelistCollectionRequest
	20, // 17: api.nft_transfer.v1.NftTransfer.DeleteWhitelistCollection:input_type -> api.nft_transfer.v1.DeleteWhitelistCollectionRequest
	22, // 18: api.nft_transfer.v1.NftTransfer.ListWhitelistCollections:input_type -> api.nft_transfer.v1.ListWhitelistCollectionsRequest
	24, // 19: api.nft_transfer.v1.NftTransfer.GetSupportedChains:input_type -> api.nft_transfer.v1.GetSupportedChainsRequest
	12, // 20: api.nft_transfer.v1.NftTransfer.GetNftTransfer:output_type -> api.nft_transfer.v1.GetNftTransferReply
	10, // 21: api.nft_transfer.v1.NftTransfer.GetReportSpam:output_type -> api.nft_transfer.v1.GetReportSpamReply
	7,  // 22: api.nft_transfer.v1.NftTransfer.PostReportSpam:output_type -> api.nft_transfer.v1.PostReportSpamReply
	4,  // 23: api.nft_transfer.v1.NftTransfer.GetTransferNft:output_type -> api.nft_transfer.v1.GetTransferNftReply
	2,  // 24: api.nft_transfer.v1.NftTransfer.PostReportAccountMute:output_type -> api.nft_transfer.v1.PostReportAccountMuteReply
	19, // 25: api.nft_transfer.v1.NftTransfer.AddWhitelistCollection:output_type -> api.nft_transfer.v1.AddWhitelistCollectionReply
	21, // 26: api.nft_transfer.v1.NftTransfer.DeleteWhitelistCollection:output_type -> api.nft_transfer.v1.DeleteWhitelistCollectionReply
	23, // 27: api.nft_transfer.v1.NftTransfer.ListWhitelistCollections:output_type -> api.nft_transfer.v1.ListWhitelistCollectionsReply
	26, // 28: api.nft_transfer.v1.NftTransfer.GetSupportedChains:output_type -> api.nft_transfer.v1.GetSupportedChainsReply
	20, // [20:29] is the sub-list for method output_type
	11, // [11:20] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_nft_transfer_v1_nft_transfer_proto_init() }
func file_nft_transfer_v1_nft_transfer_proto_init() {
	if File_nft_transfer_v1_nft_transfer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostReportAccountMuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountMuteReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostReportAccountMuteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferNftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferNftReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferNft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostReportSpamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostReportSpamReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpamReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportSpamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportSpamReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftTransferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PnftTransferSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionStArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhitelistCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWhitelistCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWhitelistCollectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWhitelistCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWhitelistCollectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWhitelistCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWhitelistCollectionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportedChainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportedChainsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nft_transfer_v1_nft_transfer_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_nft_transfer_v1_nft_transfer_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_nft_transfer_v1_nft_transfer_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_nft_transfer_v1_nft_transfer_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_nft_transfer_v1_nft_transfer_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_nft_transfer_v1_nft_transfer_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_nft_transfer_v1_nft_transfer_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_transfer_v1_nft_transfer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nft_transfer_v1_nft_transfer_proto_goTypes,
		DependencyIndexes: file_nft_transfer_v1_nft_transfer_proto_depIdxs,
		MessageInfos:      file_nft_transfer_v1_nft_transfer_proto_msgTypes,
	}.Build()
	File_nft_transfer_v1_nft_transfer_proto = out.File
	file_nft_transfer_v1_nft_transfer_proto_rawDesc = nil
	file_nft_transfer_v1_nft_transfer_proto_goTypes = nil
	file_nft_transfer_v1_nft_transfer_proto_depIdxs = nil
}

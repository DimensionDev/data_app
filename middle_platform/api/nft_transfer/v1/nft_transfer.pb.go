// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: nft_transfer/v1/nft_transfer.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetNftTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Network        string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Type           string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	OrderBy        string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	OrderDirection string `protobuf:"bytes,5,opt,name=order_direction,json=orderDirection,proto3" json:"order_direction,omitempty"`
	Limit          uint64 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Cursor         uint64 `protobuf:"varint,7,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *GetNftTransferRequest) Reset() {
	*x = GetNftTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftTransferRequest) ProtoMessage() {}

func (x *GetNftTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftTransferRequest.ProtoReflect.Descriptor instead.
func (*GetNftTransferRequest) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *GetNftTransferRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetNftTransferRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GetNftTransferRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetNftTransferRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetNftTransferRequest) GetOrderDirection() string {
	if x != nil {
		return x.OrderDirection
	}
	return ""
}

func (x *GetNftTransferRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNftTransferRequest) GetCursor() uint64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type GetNftTransferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason  string          `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *PnftTransferSt `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNftTransferReply) Reset() {
	*x = GetNftTransferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftTransferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftTransferReply) ProtoMessage() {}

func (x *GetNftTransferReply) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftTransferReply.ProtoReflect.Descriptor instead.
func (*GetNftTransferReply) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *GetNftTransferReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNftTransferReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetNftTransferReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNftTransferReply) GetData() *PnftTransferSt {
	if x != nil {
		return x.Data
	}
	return nil
}

type PnftTransferSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor *string      `protobuf:"bytes,1,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`
	Result []*NodeStArr `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *PnftTransferSt) Reset() {
	*x = PnftTransferSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PnftTransferSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PnftTransferSt) ProtoMessage() {}

func (x *PnftTransferSt) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PnftTransferSt.ProtoReflect.Descriptor instead.
func (*PnftTransferSt) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *PnftTransferSt) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

func (x *PnftTransferSt) GetResult() []*NodeStArr {
	if x != nil {
		return x.Result
	}
	return nil
}

type NodeStArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   string         `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Hash        string         `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Owner       string         `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	AddressFrom string         `protobuf:"bytes,4,opt,name=address_from,proto3" json:"address_from,omitempty"`
	AddressTo   string         `protobuf:"bytes,5,opt,name=address_to,proto3" json:"address_to,omitempty"`
	Network     string         `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	Tag         string         `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`
	Type        string         `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Actions     []*ActionStArr `protobuf:"bytes,9,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *NodeStArr) Reset() {
	*x = NodeStArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStArr) ProtoMessage() {}

func (x *NodeStArr) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStArr.ProtoReflect.Descriptor instead.
func (*NodeStArr) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *NodeStArr) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *NodeStArr) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *NodeStArr) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *NodeStArr) GetAddressFrom() string {
	if x != nil {
		return x.AddressFrom
	}
	return ""
}

func (x *NodeStArr) GetAddressTo() string {
	if x != nil {
		return x.AddressTo
	}
	return ""
}

func (x *NodeStArr) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NodeStArr) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *NodeStArr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NodeStArr) GetActions() []*ActionStArr {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ActionStArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag             string  `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Type            string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Index           uint32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	AddressFrom     string  `protobuf:"bytes,4,opt,name=address_from,proto3" json:"address_from,omitempty"`
	AddressTo       string  `protobuf:"bytes,5,opt,name=address_to,proto3" json:"address_to,omitempty"`
	Cost            *CostSt `protobuf:"bytes,6,opt,name=cost,proto3" json:"cost,omitempty"`
	ContractAddress string  `protobuf:"bytes,7,opt,name=contract_address,proto3" json:"contract_address,omitempty"`
	TokenId         string  `protobuf:"bytes,8,opt,name=token_id,proto3" json:"token_id,omitempty"`
}

func (x *ActionStArr) Reset() {
	*x = ActionStArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionStArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionStArr) ProtoMessage() {}

func (x *ActionStArr) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionStArr.ProtoReflect.Descriptor instead.
func (*ActionStArr) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *ActionStArr) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ActionStArr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActionStArr) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ActionStArr) GetAddressFrom() string {
	if x != nil {
		return x.AddressFrom
	}
	return ""
}

func (x *ActionStArr) GetAddressTo() string {
	if x != nil {
		return x.AddressTo
	}
	return ""
}

func (x *ActionStArr) GetCost() *CostSt {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *ActionStArr) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ActionStArr) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type CostSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Decimals uint32 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (x *CostSt) Reset() {
	*x = CostSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostSt) ProtoMessage() {}

func (x *CostSt) ProtoReflect() protoreflect.Message {
	mi := &file_nft_transfer_v1_nft_transfer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostSt.ProtoReflect.Descriptor instead.
func (*CostSt) Descriptor() ([]byte, []int) {
	return file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *CostSt) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CostSt) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CostSt) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

var File_nft_transfer_v1_nft_transfer_proto protoreflect.FileDescriptor

var file_nft_transfer_v1_nft_transfer_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xda, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x94, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x0e, 0x50, 0x6e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x41, 0x72, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x93, 0x02, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x41, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x41, 0x72, 0x72, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x02, 0x0a,
	0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x41, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x12, 0x2f, 0x0a, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x06, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x32, 0xc3, 0x01, 0x0a, 0x0b, 0x4e, 0x66,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0xb3, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x5a, 0x23, 0x3a, 0x01, 0x2a, 0x22,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2f, 0x67, 0x65, 0x74, 0x6e, 0x66, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2f, 0x67, 0x65, 0x74, 0x6e, 0x66, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42,
	0x3f, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x26, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nft_transfer_v1_nft_transfer_proto_rawDescOnce sync.Once
	file_nft_transfer_v1_nft_transfer_proto_rawDescData = file_nft_transfer_v1_nft_transfer_proto_rawDesc
)

func file_nft_transfer_v1_nft_transfer_proto_rawDescGZIP() []byte {
	file_nft_transfer_v1_nft_transfer_proto_rawDescOnce.Do(func() {
		file_nft_transfer_v1_nft_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_transfer_v1_nft_transfer_proto_rawDescData)
	})
	return file_nft_transfer_v1_nft_transfer_proto_rawDescData
}

var file_nft_transfer_v1_nft_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_nft_transfer_v1_nft_transfer_proto_goTypes = []interface{}{
	(*GetNftTransferRequest)(nil), // 0: api.nft_transfer.v1.GetNftTransferRequest
	(*GetNftTransferReply)(nil),   // 1: api.nft_transfer.v1.GetNftTransferReply
	(*PnftTransferSt)(nil),        // 2: api.nft_transfer.v1.PnftTransferSt
	(*NodeStArr)(nil),             // 3: api.nft_transfer.v1.NodeStArr
	(*ActionStArr)(nil),           // 4: api.nft_transfer.v1.ActionStArr
	(*CostSt)(nil),                // 5: api.nft_transfer.v1.CostSt
}
var file_nft_transfer_v1_nft_transfer_proto_depIdxs = []int32{
	2, // 0: api.nft_transfer.v1.GetNftTransferReply.data:type_name -> api.nft_transfer.v1.PnftTransferSt
	3, // 1: api.nft_transfer.v1.PnftTransferSt.result:type_name -> api.nft_transfer.v1.NodeStArr
	4, // 2: api.nft_transfer.v1.NodeStArr.actions:type_name -> api.nft_transfer.v1.ActionStArr
	5, // 3: api.nft_transfer.v1.ActionStArr.cost:type_name -> api.nft_transfer.v1.CostSt
	0, // 4: api.nft_transfer.v1.NftTransfer.GetNftTransfer:input_type -> api.nft_transfer.v1.GetNftTransferRequest
	1, // 5: api.nft_transfer.v1.NftTransfer.GetNftTransfer:output_type -> api.nft_transfer.v1.GetNftTransferReply
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_nft_transfer_v1_nft_transfer_proto_init() }
func file_nft_transfer_v1_nft_transfer_proto_init() {
	if File_nft_transfer_v1_nft_transfer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftTransferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PnftTransferSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionStArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_transfer_v1_nft_transfer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nft_transfer_v1_nft_transfer_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_transfer_v1_nft_transfer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nft_transfer_v1_nft_transfer_proto_goTypes,
		DependencyIndexes: file_nft_transfer_v1_nft_transfer_proto_depIdxs,
		MessageInfos:      file_nft_transfer_v1_nft_transfer_proto_msgTypes,
	}.Build()
	File_nft_transfer_v1_nft_transfer_proto = out.File
	file_nft_transfer_v1_nft_transfer_proto_rawDesc = nil
	file_nft_transfer_v1_nft_transfer_proto_goTypes = nil
	file_nft_transfer_v1_nft_transfer_proto_depIdxs = nil
}

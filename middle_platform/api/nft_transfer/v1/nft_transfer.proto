syntax = "proto3";

package api.nft_transfer.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "middle_platform/api/nft_transfer/v1;v1";
option java_multiple_files = true;
option java_package = "api.nft_transfer.v1";

service NftTransfer {
	rpc GetNftTransfer (GetNftTransferRequest) returns (GetNftTransferReply){
		option (google.api.http) = {
			get: "/v1/nfttransfer/getnfttransfer",
			additional_bindings {
				post: "/v1/nfttransfer/getnfttransfer",
				body: "*",
			}
		};
	};

	rpc GetReportSpam (GetReportSpamRequest) returns (GetReportSpamReply){
		option (google.api.http) = {
			get: "/v1/nfts/report/spam"
		};
	};

	rpc PostReportSpam (PostReportSpamRequest) returns (PostReportSpamReply){
		option (google.api.http) = {
			post: "/v1/nfts/report/spam",
			body: "*"
		};
	};

	rpc GetTransferNft (GetTransferNftRequest) returns (GetTransferNftReply){
		option (google.api.http) = {
			get: "/v1/nfts/transfer"
		};
	};
}
message GetTransferNftRequest {
	string contract_address = 1;
	string event_type = 2;
	string owners = 3;
	uint32 page = 4;
	uint32 limit = 5[json_name = "page_size"];
}

message GetTransferNftReply {
	uint32 code = 1;
	uint32 page = 2;
	uint32 limit = 3[json_name = "page_size"];
	uint64 total = 4;
	repeated TransferNft data = 5;
}
message TransferNft {
	string contract_address = 1;
	string nft_id = 2;
	string chain = 3;
	string token_id = 4;
	string collection_id = 5;
	string event_type = 6;
	string address_from = 7;
	string address_to = 8;
	string owner = 9;
	string block_timestamp = 10;
}
message PostReportSpamRequest {
	string collection_id = 1;
	string status = 2;
	optional string create_at = 3;
	optional string update_at = 4;
	optional string source = 5;
}

message PostReportSpamReply {
	uint32 code = 1;
	string message = 2;
	SpamReport data = 3;
}

message SpamReport {
	string collection_id = 1[json_name = "collection_id"];
	string status = 2;
	optional string create_at = 3[json_name = "create_at"];
	optional string update_at = 4[json_name = "update_at"];
	optional string source = 5[json_name = "source"];
}

message GetReportSpamRequest {
	string collection_id = 1;
	string status = 2;
	// uint32 cursor = 3;
	uint32 page = 3;
	uint32 limit = 4[json_name = "page_size"];
	string source = 5;
}

message GetReportSpamReply {
	uint32 code = 1;
	// optional uint32 cursor = 2;
	uint32 page = 2;
	uint32 limit = 3[json_name = "page_size"];
	uint64 total = 4;
	repeated SpamReport data = 5;
}


message GetNftTransferRequest {
	string address = 1[(validate.rules).string.min_len = 1];
	string network=2;
	string type=3;
	string order_by=4;
	string order_direction=5;
	uint64 limit=6;
	uint64 cursor=7;
}

message GetNftTransferReply {
	int32 code = 1;
	string reason = 2;
	string message = 3;
	PnftTransferSt data = 4;
}

message PnftTransferSt {
	optional string cursor = 1;
	repeated NodeStArr result = 2;
}

message NodeStArr {
	string  timestamp = 1;
	string  hash = 2;
	string  owner = 3;
	string  address_from=4[json_name = "address_from"];
	string  address_to=5[json_name = "address_to"];
	string  network =6;
	string  tag=7;
	string  type= 8;
	repeated ActionStArr actions = 9;
}
message ActionStArr {
	string  tag= 1;
	string  type= 2;
	uint32  index=3;
	string  address_from=4[json_name = "address_from"];
	string  address_to=5[json_name = "address_to"];
	CostSt cost = 6;
	string contract_address = 7[json_name = "contract_address"];
	string token_id = 8[json_name = "token_id"];
}

message CostSt {
	string symbol = 1;
	string value = 2;
	uint32 decimals = 3;
}
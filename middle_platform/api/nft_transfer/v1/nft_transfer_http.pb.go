// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.23.3
// source: nft_transfer/v1/nft_transfer.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNftTransferAddWhitelistCollection = "/api.nft_transfer.v1.NftTransfer/AddWhitelistCollection"
const OperationNftTransferDeleteWhitelistCollection = "/api.nft_transfer.v1.NftTransfer/DeleteWhitelistCollection"
const OperationNftTransferGetNftTransfer = "/api.nft_transfer.v1.NftTransfer/GetNftTransfer"
const OperationNftTransferGetReportSpam = "/api.nft_transfer.v1.NftTransfer/GetReportSpam"
const OperationNftTransferGetSupportedChains = "/api.nft_transfer.v1.NftTransfer/GetSupportedChains"
const OperationNftTransferGetTransferNft = "/api.nft_transfer.v1.NftTransfer/GetTransferNft"
const OperationNftTransferListWhitelistCollections = "/api.nft_transfer.v1.NftTransfer/ListWhitelistCollections"
const OperationNftTransferPostReportAccountMute = "/api.nft_transfer.v1.NftTransfer/PostReportAccountMute"
const OperationNftTransferPostReportSpam = "/api.nft_transfer.v1.NftTransfer/PostReportSpam"

type NftTransferHTTPServer interface {
	AddWhitelistCollection(context.Context, *AddWhitelistCollectionRequest) (*AddWhitelistCollectionReply, error)
	DeleteWhitelistCollection(context.Context, *DeleteWhitelistCollectionRequest) (*DeleteWhitelistCollectionReply, error)
	GetNftTransfer(context.Context, *GetNftTransferRequest) (*GetNftTransferReply, error)
	GetReportSpam(context.Context, *GetReportSpamRequest) (*GetReportSpamReply, error)
	GetSupportedChains(context.Context, *GetSupportedChainsRequest) (*GetSupportedChainsReply, error)
	GetTransferNft(context.Context, *GetTransferNftRequest) (*GetTransferNftReply, error)
	ListWhitelistCollections(context.Context, *ListWhitelistCollectionsRequest) (*ListWhitelistCollectionsReply, error)
	PostReportAccountMute(context.Context, *PostReportAccountMuteRequest) (*PostReportAccountMuteReply, error)
	PostReportSpam(context.Context, *PostReportSpamRequest) (*PostReportSpamReply, error)
}

func RegisterNftTransferHTTPServer(s *http.Server, srv NftTransferHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/nfttransfer/getnfttransfer", _NftTransfer_GetNftTransfer0_HTTP_Handler(srv))
	r.GET("/v1/nfttransfer/getnfttransfer", _NftTransfer_GetNftTransfer1_HTTP_Handler(srv))
	r.GET("/v1/nfts/report/spam", _NftTransfer_GetReportSpam0_HTTP_Handler(srv))
	r.POST("/v1/nfts/report/spam", _NftTransfer_PostReportSpam0_HTTP_Handler(srv))
	r.POST("/v1/nfts/transfer", _NftTransfer_GetTransferNft0_HTTP_Handler(srv))
	r.POST("/v1/nfts/mute", _NftTransfer_PostReportAccountMute0_HTTP_Handler(srv))
	r.POST("/v1/nfttransfer/whitelist/collection", _NftTransfer_AddWhitelistCollection0_HTTP_Handler(srv))
	r.DELETE("/v1/nfttransfer/whitelist/collection/{collection_id}", _NftTransfer_DeleteWhitelistCollection0_HTTP_Handler(srv))
	r.GET("/v1/nfttransfer/whitelist/collections", _NftTransfer_ListWhitelistCollections0_HTTP_Handler(srv))
	r.GET("/v1/nfttransfer/supported-chains", _NftTransfer_GetSupportedChains0_HTTP_Handler(srv))
}

func _NftTransfer_GetNftTransfer0_HTTP_Handler(srv NftTransferHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNftTransferRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftTransferGetNftTransfer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNftTransfer(ctx, req.(*GetNftTransferRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNftTransferReply)
		return ctx.Result(200, reply)
	}
}

func _NftTransfer_GetNftTransfer1_HTTP_Handler(srv NftTransferHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNftTransferRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftTransferGetNftTransfer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNftTransfer(ctx, req.(*GetNftTransferRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNftTransferReply)
		return ctx.Result(200, reply)
	}
}

func _NftTransfer_GetReportSpam0_HTTP_Handler(srv NftTransferHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReportSpamRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftTransferGetReportSpam)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReportSpam(ctx, req.(*GetReportSpamRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReportSpamReply)
		return ctx.Result(200, reply)
	}
}

func _NftTransfer_PostReportSpam0_HTTP_Handler(srv NftTransferHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PostReportSpamRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftTransferPostReportSpam)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PostReportSpam(ctx, req.(*PostReportSpamRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PostReportSpamReply)
		return ctx.Result(200, reply)
	}
}

func _NftTransfer_GetTransferNft0_HTTP_Handler(srv NftTransferHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTransferNftRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftTransferGetTransferNft)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTransferNft(ctx, req.(*GetTransferNftRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTransferNftReply)
		return ctx.Result(200, reply)
	}
}

func _NftTransfer_PostReportAccountMute0_HTTP_Handler(srv NftTransferHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PostReportAccountMuteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftTransferPostReportAccountMute)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PostReportAccountMute(ctx, req.(*PostReportAccountMuteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PostReportAccountMuteReply)
		return ctx.Result(200, reply)
	}
}

func _NftTransfer_AddWhitelistCollection0_HTTP_Handler(srv NftTransferHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddWhitelistCollectionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftTransferAddWhitelistCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddWhitelistCollection(ctx, req.(*AddWhitelistCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddWhitelistCollectionReply)
		return ctx.Result(200, reply)
	}
}

func _NftTransfer_DeleteWhitelistCollection0_HTTP_Handler(srv NftTransferHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteWhitelistCollectionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftTransferDeleteWhitelistCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteWhitelistCollection(ctx, req.(*DeleteWhitelistCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteWhitelistCollectionReply)
		return ctx.Result(200, reply)
	}
}

func _NftTransfer_ListWhitelistCollections0_HTTP_Handler(srv NftTransferHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWhitelistCollectionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftTransferListWhitelistCollections)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWhitelistCollections(ctx, req.(*ListWhitelistCollectionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWhitelistCollectionsReply)
		return ctx.Result(200, reply)
	}
}

func _NftTransfer_GetSupportedChains0_HTTP_Handler(srv NftTransferHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSupportedChainsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftTransferGetSupportedChains)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSupportedChains(ctx, req.(*GetSupportedChainsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSupportedChainsReply)
		return ctx.Result(200, reply)
	}
}

type NftTransferHTTPClient interface {
	AddWhitelistCollection(ctx context.Context, req *AddWhitelistCollectionRequest, opts ...http.CallOption) (rsp *AddWhitelistCollectionReply, err error)
	DeleteWhitelistCollection(ctx context.Context, req *DeleteWhitelistCollectionRequest, opts ...http.CallOption) (rsp *DeleteWhitelistCollectionReply, err error)
	GetNftTransfer(ctx context.Context, req *GetNftTransferRequest, opts ...http.CallOption) (rsp *GetNftTransferReply, err error)
	GetReportSpam(ctx context.Context, req *GetReportSpamRequest, opts ...http.CallOption) (rsp *GetReportSpamReply, err error)
	GetSupportedChains(ctx context.Context, req *GetSupportedChainsRequest, opts ...http.CallOption) (rsp *GetSupportedChainsReply, err error)
	GetTransferNft(ctx context.Context, req *GetTransferNftRequest, opts ...http.CallOption) (rsp *GetTransferNftReply, err error)
	ListWhitelistCollections(ctx context.Context, req *ListWhitelistCollectionsRequest, opts ...http.CallOption) (rsp *ListWhitelistCollectionsReply, err error)
	PostReportAccountMute(ctx context.Context, req *PostReportAccountMuteRequest, opts ...http.CallOption) (rsp *PostReportAccountMuteReply, err error)
	PostReportSpam(ctx context.Context, req *PostReportSpamRequest, opts ...http.CallOption) (rsp *PostReportSpamReply, err error)
}

type NftTransferHTTPClientImpl struct {
	cc *http.Client
}

func NewNftTransferHTTPClient(client *http.Client) NftTransferHTTPClient {
	return &NftTransferHTTPClientImpl{client}
}

func (c *NftTransferHTTPClientImpl) AddWhitelistCollection(ctx context.Context, in *AddWhitelistCollectionRequest, opts ...http.CallOption) (*AddWhitelistCollectionReply, error) {
	var out AddWhitelistCollectionReply
	pattern := "/v1/nfttransfer/whitelist/collection"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNftTransferAddWhitelistCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftTransferHTTPClientImpl) DeleteWhitelistCollection(ctx context.Context, in *DeleteWhitelistCollectionRequest, opts ...http.CallOption) (*DeleteWhitelistCollectionReply, error) {
	var out DeleteWhitelistCollectionReply
	pattern := "/v1/nfttransfer/whitelist/collection/{collection_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftTransferDeleteWhitelistCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftTransferHTTPClientImpl) GetNftTransfer(ctx context.Context, in *GetNftTransferRequest, opts ...http.CallOption) (*GetNftTransferReply, error) {
	var out GetNftTransferReply
	pattern := "/v1/nfttransfer/getnfttransfer"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftTransferGetNftTransfer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftTransferHTTPClientImpl) GetReportSpam(ctx context.Context, in *GetReportSpamRequest, opts ...http.CallOption) (*GetReportSpamReply, error) {
	var out GetReportSpamReply
	pattern := "/v1/nfts/report/spam"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftTransferGetReportSpam))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftTransferHTTPClientImpl) GetSupportedChains(ctx context.Context, in *GetSupportedChainsRequest, opts ...http.CallOption) (*GetSupportedChainsReply, error) {
	var out GetSupportedChainsReply
	pattern := "/v1/nfttransfer/supported-chains"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftTransferGetSupportedChains))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftTransferHTTPClientImpl) GetTransferNft(ctx context.Context, in *GetTransferNftRequest, opts ...http.CallOption) (*GetTransferNftReply, error) {
	var out GetTransferNftReply
	pattern := "/v1/nfts/transfer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNftTransferGetTransferNft))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftTransferHTTPClientImpl) ListWhitelistCollections(ctx context.Context, in *ListWhitelistCollectionsRequest, opts ...http.CallOption) (*ListWhitelistCollectionsReply, error) {
	var out ListWhitelistCollectionsReply
	pattern := "/v1/nfttransfer/whitelist/collections"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftTransferListWhitelistCollections))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftTransferHTTPClientImpl) PostReportAccountMute(ctx context.Context, in *PostReportAccountMuteRequest, opts ...http.CallOption) (*PostReportAccountMuteReply, error) {
	var out PostReportAccountMuteReply
	pattern := "/v1/nfts/mute"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNftTransferPostReportAccountMute))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftTransferHTTPClientImpl) PostReportSpam(ctx context.Context, in *PostReportSpamRequest, opts ...http.CallOption) (*PostReportSpamReply, error) {
	var out PostReportSpamReply
	pattern := "/v1/nfts/report/spam"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNftTransferPostReportSpam))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
